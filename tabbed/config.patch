--- config.def.h	2022-04-23 21:39:49.155101820 +0200
+++ config.h	2022-04-23 21:39:48.985243243 +0200
@@ -1,13 +1,7 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const char font[]        = "monospace:size=9";
-static const char* normbgcolor  = "#222222";
-static const char* normfgcolor  = "#cccccc";
-static const char* selbgcolor   = "#555555";
-static const char* selfgcolor   = "#ffffff";
-static const char* urgbgcolor   = "#111111";
-static const char* urgfgcolor   = "#cc0000";
+static const char font[]        = "Dejavu Sans Mono:bold:size=11";
 static const char before[]      = "<";
 static const char after[]       = ">";
 static const char titletrim[]   = "...";
@@ -15,6 +9,40 @@
 static const Bool foreground    = True;
 static       Bool urgentswitch  = False;
 
+
+static const Colors urgcolor = {
+  {0xcccc, 0x0000, 0x0000, 0xffff}, {0x1111, 0x1111, 0x1111, 0x1111}
+};
+
+/* fg: rgba, bg: rgba */
+static const Colors colors[] = {
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x5555, 0x5555, 0x5555, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0xcccc, 0x2222, 0x2222, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0xcccc, 0xcccc, 0x0000, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0xcccc, 0x0000, 0xcccc, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x0000, 0xcccc, 0xcccc, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x0000, 0xcccc, 0x0000, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x0000, 0x0000, 0xcccc, 0xffff}}, */
+
+  /* with help of colorwrewer2 */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x5555, 0x5555, 0x5555, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0xe4e4, 0x1a1a, 0x1c1c, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x3737, 0x7e7e, 0xb8b8, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x4d4d, 0xafaf, 0x4a4a, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0x9898, 0x4e4e, 0xa3a3, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0xffff, 0x7f7f, 0x0000, 0xffff}}, */
+  /* {{0xffff, 0xffff, 0xffff, 0xffff}, {0xa6a6, 0x5656, 0x2828, 0xffff}}, */
+
+  {{0xffff, 0xffff, 0xffff, 0xffff}, {0x5555, 0x5555, 0x5555, 0xffff}},
+  {{0xffff, 0xffff, 0xffff, 0xffff}, {0x1b1b, 0x9e9e, 0x7777, 0xffff}},
+  {{0xffff, 0xffff, 0xffff, 0xffff}, {0xd9d9, 0x5f5f, 0x0202, 0xffff}},
+  {{0xffff, 0xffff, 0xffff, 0xffff}, {0x7575, 0x7070, 0xb3b3, 0xffff}},
+  {{0xffff, 0xffff, 0xffff, 0xffff}, {0xe7e7, 0x2929, 0x8a8a, 0xffff}},
+  {{0xffff, 0xffff, 0xffff, 0xffff}, {0x6666, 0xa6a6, 0x1e1e, 0xffff}},
+  {{0xffff, 0xffff, 0xffff, 0xffff}, {0xe6e6, 0xabab, 0x0202, 0xffff}},
+
+};
+
 /*
  * Where to place a new tab when it is opened. When npisrelative is True,
  * then the current position is changed + newposition. If npisrelative
@@ -39,11 +67,13 @@
 	{ MODKEY|ShiftMask,     XK_Return, focusonce,   { 0 } },
 	{ MODKEY|ShiftMask,     XK_Return, spawn,       { 0 } },
 
-	{ MODKEY|ShiftMask,     XK_l,      rotate,      { .i = +1 } },
-	{ MODKEY|ShiftMask,     XK_h,      rotate,      { .i = -1 } },
+	{ MODKEY|Mod1Mask,      XK_Left,   rotate,      { .i = -1 } },
+	{ MODKEY|Mod1Mask,      XK_Right,  rotate,      { .i = +1 } },
 	{ MODKEY|ShiftMask,     XK_j,      movetab,     { .i = -1 } },
 	{ MODKEY|ShiftMask,     XK_k,      movetab,     { .i = +1 } },
 	{ MODKEY,               XK_Tab,    rotate,      { .i = 0 } },
+	{ MODKEY|ShiftMask,     XK_p,      changecolor, { .i = +1 } },
+	{ MODKEY|ShiftMask,     XK_o,      changecolor, { .i = -1 } },
 
 	{ MODKEY,               XK_grave,  spawn,       SETPROP("_TABBED_SELECT_TAB") },
 	{ MODKEY,               XK_1,      move,        { .i = 0 } },
@@ -57,10 +87,10 @@
 	{ MODKEY,               XK_9,      move,        { .i = 8 } },
 	{ MODKEY,               XK_0,      move,        { .i = 9 } },
 
-	{ MODKEY,               XK_q,      killclient,  { 0 } },
+	/* { MODKEY,               XK_q,      killclient,  { 0 } }, */
 
-	{ MODKEY,               XK_u,      focusurgent, { 0 } },
-	{ MODKEY|ShiftMask,     XK_u,      toggle,      { .v = (void*) &urgentswitch } },
+	{ Mod1Mask|ShiftMask,   XK_u,      toggle,      { .v = (void*) &urgentswitch } },
+	{ Mod1Mask,             XK_u,      focusurgent, { 0 } },
 
 	{ 0,                    XK_F11,    fullscreen,  { 0 } },
 };
