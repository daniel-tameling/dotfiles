From 7c03d8ca332cf66437dfa61b04ee39a926b1ba47 Mon Sep 17 00:00:00 2001
From: Daniel Tameling <tamelingdaniel@gmail.com>
Date: Wed, 30 Jan 2019 20:31:00 +0100
Subject: [PATCH 5/8] applies fixed
 st-scrollback-mouse-altscreen-20190106-e23acb9.diff

---
 config.def.h | 10 +++++-----
 st.c         | 44 +-------------------------------------------
 st.h         | 42 ++++++++++++++++++++++++++++++++++++++++++
 x.c          |  9 +++++++--
 4 files changed, 55 insertions(+), 50 deletions(-)

diff --git a/config.def.h b/config.def.h
index 819e5a2..84063d9 100644
--- a/config.def.h
+++ b/config.def.h
@@ -162,12 +162,12 @@ static uint forcemousemod = ShiftMask;
  * Beware that overloading Button1 will disable the selection.
  */
 static MouseShortcut mshortcuts[] = {
-	/* mask                 button   function        argument       release */
+	/* mask                 button   function        argument       release  onlyaltscreen*/
 	{ XK_ANY_MOD,           Button2, selpaste,       {.i = 0},      1 },
-	{ ShiftMask,            Button4, kscrollup,      {.i =  1} },
-	{ ShiftMask,            Button5, kscrolldown,    {.i =  1} },
-	{ XK_ANY_MOD,           Button4, ttysend,        {.s = "\031"} },
-	{ XK_ANY_MOD,           Button5, ttysend,        {.s = "\005"} },
+        { XK_ANY_MOD,           Button4, ttysend,        {.s = "\031"}, 0,       1 },
+        { XK_ANY_MOD,           Button5, ttysend,        {.s = "\005"}, 0,       1 },
+	{ XK_ANY_MOD,           Button4, kscrollup,      {.i =  1} },
+	{ XK_ANY_MOD,           Button5, kscrolldown,    {.i =  1} },
 };
 
 /* Internal keyboard shortcuts. */
diff --git a/st.c b/st.c
index 503bd90..87a562d 100644
--- a/st.c
+++ b/st.c
@@ -35,7 +35,6 @@
 #define ESC_ARG_SIZ   16
 #define STR_BUF_SIZ   ESC_BUF_SIZ
 #define STR_ARG_SIZ   ESC_ARG_SIZ
-#define HISTSIZE      20000
 
 /* macros */
 #define IS_SET(flag)		((term.mode & (flag)) != 0)
@@ -47,17 +46,6 @@
 				term.scr + HISTSIZE + 1) % HISTSIZE] : \
 				term.line[(y) - term.scr])
 
-enum term_mode {
-	MODE_WRAP        = 1 << 0,
-	MODE_INSERT      = 1 << 1,
-	MODE_ALTSCREEN   = 1 << 2,
-	MODE_CRLF        = 1 << 3,
-	MODE_ECHO        = 1 << 4,
-	MODE_PRINT       = 1 << 5,
-	MODE_UTF8        = 1 << 6,
-	MODE_SIXEL       = 1 << 7,
-};
-
 enum cursor_movement {
 	CURSOR_SAVE,
 	CURSOR_LOAD
@@ -90,13 +78,6 @@ enum escape_state {
 	ESC_DCS        =128,
 };
 
-typedef struct {
-	Glyph attr; /* current char attributes */
-	int x;
-	int y;
-	char state;
-} TCursor;
-
 typedef struct {
 	int mode;
 	int type;
@@ -115,29 +96,6 @@ typedef struct {
 	int alt;
 } Selection;
 
-/* Internal representation of the screen */
-typedef struct {
-	int row;      /* nb row */
-	int col;      /* nb col */
-	Line *line;   /* screen */
-	Line *alt;    /* alternate screen */
-	Line hist[HISTSIZE]; /* history buffer */
-	int histi;    /* history index */
-	int scr;      /* scroll back */
-	int *dirty;   /* dirtyness of lines */
-	TCursor c;    /* cursor */
-	int ocx;      /* old cursor col */
-	int ocy;      /* old cursor row */
-	int top;      /* top    scroll limit */
-	int bot;      /* bottom scroll limit */
-	int mode;     /* terminal mode flags */
-	int esc;      /* escape state flags */
-	char trantbl[4]; /* charset table translation */
-	int charset;  /* current charset */
-	int icharset; /* selected charset for sequence */
-	int *tabs;
-} Term;
-
 /* CSI Escape sequence structs */
 /* ESC '[' [[ [<priv>] <arg> [;]] <mode> [<mode>]] */
 typedef struct {
@@ -226,7 +184,7 @@ static char base64dec_getc(const char **);
 static ssize_t xwrite(int, const char *, size_t);
 
 /* Globals */
-static Term term;
+Term term;
 static Selection sel;
 static CSIEscape csiescseq;
 static STREscape strescseq;
diff --git a/st.h b/st.h
index 1332cf1..bf3773c 100644
--- a/st.h
+++ b/st.h
@@ -19,6 +19,18 @@
 
 #define TRUECOLOR(r,g,b)	(1 << 24 | (r) << 16 | (g) << 8 | (b))
 #define IS_TRUECOL(x)		(1 << 24 & (x))
+#define HISTSIZE                20000
+
+enum term_mode {
+	MODE_WRAP        = 1 << 0,
+	MODE_INSERT      = 1 << 1,
+	MODE_ALTSCREEN   = 1 << 2,
+	MODE_CRLF        = 1 << 3,
+	MODE_ECHO        = 1 << 4,
+	MODE_PRINT       = 1 << 5,
+	MODE_UTF8        = 1 << 6,
+	MODE_SIXEL       = 1 << 7,
+};
 
 enum glyph_attribute {
 	ATTR_NULL       = 0,
@@ -69,6 +81,36 @@ typedef struct {
 
 typedef Glyph *Line;
 
+typedef struct {
+	Glyph attr; /* current char attributes */
+	int x;
+	int y;
+	char state;
+} TCursor;
+
+/* Internal representation of the screen */
+typedef struct {
+	int row;      /* nb row */
+	int col;      /* nb col */
+	Line *line;   /* screen */
+	Line *alt;    /* alternate screen */
+	Line hist[HISTSIZE]; /* history buffer */
+	int histi;    /* history index */
+	int scr;      /* scroll back */
+	int *dirty;   /* dirtyness of lines */
+	TCursor c;    /* cursor */
+	int ocx;      /* old cursor col */
+	int ocy;      /* old cursor row */
+	int top;      /* top    scroll limit */
+	int bot;      /* bottom scroll limit */
+	int mode;     /* terminal mode flags */
+	int esc;      /* escape state flags */
+	char trantbl[4]; /* charset table translation */
+	int charset;  /* current charset */
+	int icharset; /* selected charset for sequence */
+	int *tabs;
+} Term;
+
 typedef union {
 	int i;
 	uint ui;
diff --git a/x.c b/x.c
index ebc341f..fd17fd7 100644
--- a/x.c
+++ b/x.c
@@ -34,6 +34,7 @@ typedef struct {
 	void (*func)(const Arg *);
 	const Arg arg;
 	uint  release;
+        int onlyaltscreen; /* if 1 call func only when in altscreen */
 } MouseShortcut;
 
 typedef struct {
@@ -69,6 +70,7 @@ static void ttysend(const Arg *);
 
 /* macros */
 #define IS_SET(flag)		((win.mode & (flag)) != 0)
+#define IS_ALTSCREEN	        ((term.mode & (MODE_ALTSCREEN)) != 0)
 #define TRUERED(x)		(((x) & 0xff0000) >> 8)
 #define TRUEGREEN(x)		(((x) & 0xff00))
 #define TRUEBLUE(x)		(((x) & 0xff) << 8)
@@ -77,6 +79,7 @@ typedef XftDraw *Draw;
 typedef XftColor Color;
 typedef XftGlyphFontSpec GlyphFontSpec;
 
+
 /* Purely graphic info */
 typedef struct {
 	int tw, th; /* tty width and height */
@@ -214,6 +217,7 @@ static DC dc;
 static XWindow xw;
 static XSelection xsel;
 static TermWindow win;
+extern Term term;
 
 /* Font Ring Cache */
 enum {
@@ -422,12 +426,13 @@ int
 mouseaction(XEvent *e, uint release)
 {
 	MouseShortcut *ms;
-
+        
 	for (ms = mshortcuts; ms < mshortcuts + LEN(mshortcuts); ms++) {
 		if (ms->release == release &&
 		    ms->button == e->xbutton.button &&
 		    (match(ms->mod, e->xbutton.state) ||  /* exact or forced */
-		     match(ms->mod, e->xbutton.state & ~forcemousemod))) {
+		     match(ms->mod, e->xbutton.state & ~forcemousemod)) &&
+                    IS_ALTSCREEN == ms->onlyaltscreen) {
 			ms->func(&(ms->arg));
 			return 1;
 		}
-- 
2.21.0 (Apple Git-122.2)

